{"ast":null,"code":"const ELEMENT_SEPARATOR = \"__\",\n      MODIFIER_SEPARATOR = \"_\";\n\nfunction getBEMPAth({\n  b,\n  e,\n  m\n}) {\n  const base = e ? [b, e].join(ELEMENT_SEPARATOR) : b;\n  return [base, ...m.map(modifier => [base, modifier].join(MODIFIER_SEPARATOR))].join(\" \").trim();\n}\n\nconst b = b => (elementName, modifiers = {}) => {\n  let e, m;\n\n  if (typeof elementName === \"string\") {\n    e = elementName;\n  } else {\n    modifiers = elementName || {};\n  }\n\n  if (Array.isArray(modifiers)) {\n    m = modifiers;\n  } else {\n    m = Object.keys(modifiers).filter(modifier => modifiers[modifier]) || [];\n  }\n\n  return getBEMPAth({\n    b,\n    e,\n    m\n  });\n};\n\nexport default b;","map":{"version":3,"sources":["/Users/ninabondar/WebstormProjects/socket/src/frontend/src/utils/BEM.js"],"names":["ELEMENT_SEPARATOR","MODIFIER_SEPARATOR","getBEMPAth","b","e","m","base","join","map","modifier","trim","elementName","modifiers","Array","isArray","Object","keys","filter"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,IAA1B;AAAA,MACEC,kBAAkB,GAAG,GADvB;;AAGA,SAASC,UAAT,CAAoB;AAAEC,EAAAA,CAAF;AAAKC,EAAAA,CAAL;AAAQC,EAAAA;AAAR,CAApB,EAAiC;AAC/B,QAAMC,IAAI,GAAGF,CAAC,GAAG,CAACD,CAAD,EAAIC,CAAJ,EAAOG,IAAP,CAAYP,iBAAZ,CAAH,GAAoCG,CAAlD;AAEA,SAAO,CAACG,IAAD,EAAO,GAAGD,CAAC,CAACG,GAAF,CAAMC,QAAQ,IAAI,CAACH,IAAD,EAAOG,QAAP,EAAiBF,IAAjB,CAAsBN,kBAAtB,CAAlB,CAAV,EACJM,IADI,CACC,GADD,EAEJG,IAFI,EAAP;AAGD;;AAED,MAAMP,CAAC,GAAGA,CAAC,IAAI,CAACQ,WAAD,EAAcC,SAAS,GAAG,EAA1B,KAAiC;AAC9C,MAAIR,CAAJ,EAAOC,CAAP;;AAEA,MAAI,OAAOM,WAAP,KAAuB,QAA3B,EAAqC;AACnCP,IAAAA,CAAC,GAAGO,WAAJ;AACD,GAFD,MAEO;AACLC,IAAAA,SAAS,GAAGD,WAAW,IAAI,EAA3B;AACD;;AAED,MAAIE,KAAK,CAACC,OAAN,CAAcF,SAAd,CAAJ,EAA8B;AAC5BP,IAAAA,CAAC,GAAGO,SAAJ;AACD,GAFD,MAEO;AACLP,IAAAA,CAAC,GAAGU,MAAM,CAACC,IAAP,CAAYJ,SAAZ,EAAuBK,MAAvB,CAA8BR,QAAQ,IAAIG,SAAS,CAACH,QAAD,CAAnD,KAAkE,EAAtE;AACD;;AAED,SAAOP,UAAU,CAAC;AAAEC,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQC,IAAAA;AAAR,GAAD,CAAjB;AACD,CAhBD;;AAkBA,eAAeF,CAAf","sourcesContent":["const ELEMENT_SEPARATOR = \"__\",\n  MODIFIER_SEPARATOR = \"_\";\n\nfunction getBEMPAth({ b, e, m }) {\n  const base = e ? [b, e].join(ELEMENT_SEPARATOR) : b;\n\n  return [base, ...m.map(modifier => [base, modifier].join(MODIFIER_SEPARATOR))]\n    .join(\" \")\n    .trim();\n}\n\nconst b = b => (elementName, modifiers = {}) => {\n  let e, m;\n\n  if (typeof elementName === \"string\") {\n    e = elementName;\n  } else {\n    modifiers = elementName || {};\n  }\n\n  if (Array.isArray(modifiers)) {\n    m = modifiers;\n  } else {\n    m = Object.keys(modifiers).filter(modifier => modifiers[modifier]) || [];\n  }\n\n  return getBEMPAth({ b, e, m });\n};\n\nexport default b;\n"]},"metadata":{},"sourceType":"module"}